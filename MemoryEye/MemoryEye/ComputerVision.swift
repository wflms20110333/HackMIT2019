//
//  ComputerVision.swift
//  MemoryEye
//
//  Created by Elizabeth Y Zou on 9/15/19.
//  Copyright Â© 2019 Peter T Tran. All rights reserved.
//

import UIKit
import Foundation

class ComputerVision {
    
    static let endpoint = "https://eastus.api.cognitive.microsoft.com/customvision/v3.0/training/projects/f248636d-d065-48fc-81ee-f7b43dbe613d/"
    static let headers: [String: String] = ["Training-Key": "",
                                            "Content-Type": "application/json",
                                            "Training-key": "4b0f271e887740d2aa11154f42ee60b0"];
    static var httpResponse: [String: Any] = [:]
    static var group: DispatchGroup = DispatchGroup()
    
    static func test() {
        print("Hello World")
//        let tagID = createTag(tagName: "chicken")
//        createImage(imageUrl: "https://www.animalsaustralia.org/images/features/1000-chickenlove-06-gab.jpg", tagID: tagID)
//        let chickens = ["https://www.animalsaustralia.org/images/features/1000-chickenlove-06-gab.jpg",
//                        "https://cdn.britannica.com/18/137318-050-29F7072E/rooster-Rhode-Island-Red-roosters-chicken-domestication.jpg",
//                        "https://compote.slate.com/images/a193672a-bdbc-40d3-bfbc-c85d40a5df11.jpg",
//                        "http://www.veganpeace.com/animal_facts/images/chicken1.jpg",
//                        "http://www.veganpeace.com/animal_facts/images/chicken2.jpg"]
//        let tagID = addImages(imageUrls: chickens, tagName: "chicken")
//        print(tagID)
        train()
    }
    
    /// Trains the model.
    static func train() {
        requestWrapper(method: "POST", apiUrl: "train")
    }
    
    /// Creates multiple images to Custom Vision with a given tag.
    ///
    /// - Parameters:
    ///   - imageUrls: An array containing the image URLs.
    ///   - tagName: The name of the tag.
    /// - Returns: The tag ID generated by Custom Vision.
    static func addImages(imageUrls: Array<String>, tagName: String) -> String {
        let tagID = createTag(tagName: tagName)
        for imageUrl in imageUrls {
            createImage(imageUrl: imageUrl, tagID: tagID)
        }
        return tagID
    }
    
    /// Creates an tag Custom Vision.
    ///
    /// - Parameters:
    ///   - tagName: The name of the tag.
    /// - Returns: The tag ID generated by Custom Vision.
    static func createTag(tagName: String) -> String {
        requestWrapper(method: "POST", apiUrl: "tags?name=" + tagName)
        return httpResponse["id"] as! String
    }
    
    /// Creates an image in Custom Vision associated with a given tag.
    ///
    /// - Parameters:
    ///   - imageUrl: The URL of the image.
    ///   - tagID: The tag ID generated by Custom Vision.
    static func createImage(imageUrl: String, tagID: String) {
        // create image
        let createImageJSON: [String: Any] = [
            "images": [
                [
                    "url": imageUrl
                ]
            ]
        ]
        requestWrapper(method: "POST", apiUrl: "images/urls", json: createImageJSON)
        
        // associate image with tag
        let imgs: Array<[String: Any]> = httpResponse["images"] as! Array
        let img = imgs[0]["image"] as! [String: Any]
        let imgID = img["id"] as! String
        associateImageAndTag(imageID: imgID, tagID: tagID)
    }
    
    /// Associates an image with a tag.
    ///
    /// - Parameters:
    ///   - imageID: The image ID generated by Custom Vision.
    ///   - tagID: The tag ID generated by Custom Vision.
    static func associateImageAndTag(imageID: String, tagID: String) {
        let associateJSON: [String: Any] = [
            "tags": [
                [
                    "imageId": imageID,
                    "tagId": tagID
                ]
            ]
        ]
        requestWrapper(method: "POST", apiUrl: "images/tags", json: associateJSON)
    }
    
    /// Sends HTTP requests until they succeed.
    ///
    /// - Parameters:
    ///   - method: The HTTP method of the request.
    ///   - apiUrl: The end of the request URL.
    ///   - json: A dictionary for the request body; default empty.
    static func requestWrapper(method: String, apiUrl: String, json: [String: Any] = [:]) {
        httpResponse = [:]
        while httpResponse.count == 0 || httpResponse["error"] != nil {
            group.enter()
            sendRequest(method: method, apiUrl: apiUrl, json: json)
            group.wait()
        }
    }
    
    /// Sends an HTTP request.
    ///
    /// - Parameters:
    ///   - method: The HTTP method of the request.
    ///   - apiUrl: The end of the request URL.
    ///   - json: A dictionary for the request body.
    static func sendRequest(method: String, apiUrl: String, json: [String: Any]) {
        // create request
        let httpUrl = endpoint + apiUrl
        guard let url = URL(string: httpUrl) else {
            return
        }
        var request = URLRequest(url: url)
        request.httpMethod = method
        
        // set header values
        for (key, value) in headers {
            request.setValue(value, forHTTPHeaderField: key)
        }
        
        // set body values
        let jsonData = try? JSONSerialization.data(withJSONObject: json)
        request.httpBody = jsonData
        
        // make the request
        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
            print("yay")
            guard let data = data, error == nil else {
                print(error?.localizedDescription ?? "No data")
                return
            }
            let responseJSON = try? JSONSerialization.jsonObject(with: data, options: [])
            if let responseJSON = responseJSON as? [String: Any] {
                httpResponse = responseJSON
                group.leave()
                print(responseJSON)
            }
        }
        task.resume()
    }
}
