//
//  ComputerVision.swift
//  MemoryEye
//
//  Created by Elizabeth Y Zou on 9/15/19.
//  Copyright Â© 2019 Peter T Tran. All rights reserved.
//

import UIKit
import Foundation

/// Custom Vision only works with at least 2 tags and at least 5 images per tag
/// Need to train and publish every time after adding new images
/// Store the last iteration number
class ComputerVision {
    
    static let train_endpoint = "https://eastus.api.cognitive.microsoft.com/customvision/v3.0/training/projects/f248636d-d065-48fc-81ee-f7b43dbe613d/"
    static let predict_endpoint = "https://eastus.api.cognitive.microsoft.com/customvision/v3.0/Prediction/f248636d-d065-48fc-81ee-f7b43dbe613d/"
    static let train_headers: [String: String] = ["Training-Key": "",
                                            "Content-Type": "application/json",
                                            "Training-key": "4b0f271e887740d2aa11154f42ee60b0"];
    static let predict_headers: [String: String] = ["Prediction-Key": "",
                                                    "Content-Type": "application/json",
                                                    "Prediction-key": "139fdccd8e814abf9669de03d6f98792"];
    
    static var httpResponse: [String: Any] = [:]
    static var group: DispatchGroup = DispatchGroup()
    
    static func test() {
        // Ex: adding images
//        let ducks = ["https://www.mcmurrayhatchery.com/images/global/mc/McMurrayHatchery-White-Pekin-Duck.jpg",
//                        "https://ichef.bbci.co.uk/news/660/cpsprodpb/87BA/production/_105364743_41440931_2196574140417666_5390287486666670080_n.jpg",
//                        "https://upload.wikimedia.org/wikipedia/commons/a/a1/Mallard2.jpg",
//                        "https://i.pinimg.com/originals/78/af/11/78af11b5c68f83d56fa24ae26497e6c6.jpg",
//                        "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRGERhFEhvYvAo_t039HdF11j44V-D0DslU921RcqGkZQxbVNFC"]
//        _ = addImages(imageUrls: ducks, tagName: "duck")

        // Ex: training
//        let iterationID = train()
        
        // Ex: publishing
//        let publishName = publish(iterationID: iterationID, 4)
        
        // Ex: classifying
//        let predictions = classify(imageUrl: "https://deltawaterfowl.org/wp-content/uploads/2017/04/mallard-web.jpg", publishName: "Iteration3")
//        print(predictions)
    }
    
    /// Classifies a given image.
    ///
    /// - Parameters:
    ///   - imageUrl: The URL of the image to classify.
    ///   - publishName: The published name of the model.
    /// - Returns: An array of dictionaries containing the tag name, tag ID, and probability the given image falls in that category.
    static func classify(imageUrl: String, publishName: String) -> NSArray {
        let json: [String: Any] = [
            "url": imageUrl
        ]
        requestWrapper(method: "POST", apiUrl: "classify/iterations/" + publishName + "/url", json: json, predict: true)
        return httpResponse["predictions"] as! NSArray
    }
    
    /// Publishes a model.
    ///
    /// - Parameters:
    ///   - iteration ID: The iteration ID of the model to publish.
    ///   - n: The iteration number in the publish name.
    /// - Returns: The published name of the model.
    static func publish(iterationID: String, n: intmax_t) -> String {
        let publishName = "Iteration\(n)"
        requestWrapper(method: "POST", apiUrl: "iterations/" + iterationID + "/publish?publishName=" + publishName + "&predictionId=/subscriptions/d0146674-735f-420a-8f3e-415d9d8a09ba/resourceGroups/MemoryEye/providers/Microsoft.CognitiveServices/accounts/MemoryEyeCV_Prediction")
        return publishName
    }
    
    /// Trains the model.
    ///
    /// - Returns: The iteration ID generated by Custom Vision.
    static func train() -> String {
        requestWrapper(method: "POST", apiUrl: "train")
        return httpResponse["id"] as! String
    }
    
    /// Creates multiple images to Custom Vision with a given tag.
    ///
    /// - Parameters:
    ///   - imageUrls: An array containing the image URLs.
    ///   - tagName: The name of the tag.
    /// - Returns: The tag ID generated by Custom Vision.
    static func addImages(imageUrls: Array<String>, tagName: String) -> String {
        let tagID = createTag(tagName: tagName)
        for imageUrl in imageUrls {
            createImage(imageUrl: imageUrl, tagID: tagID)
        }
        return tagID
    }
    
    /// Creates an tag Custom Vision.
    ///
    /// - Parameters:
    ///   - tagName: The name of the tag.
    /// - Returns: The tag ID generated by Custom Vision.
    static func createTag(tagName: String) -> String {
        requestWrapper(method: "POST", apiUrl: "tags?name=" + tagName)
        return httpResponse["id"] as! String
    }
    
    /// Creates an image in Custom Vision associated with a given tag.
    ///
    /// - Parameters:
    ///   - imageUrl: The URL of the image.
    ///   - tagID: The tag ID generated by Custom Vision.
    static func createImage(imageUrl: String, tagID: String) {
        // create image
        let json: [String: Any] = [
            "images": [
                [
                    "url": imageUrl
                ]
            ]
        ]
        requestWrapper(method: "POST", apiUrl: "images/urls", json: json)
        
        // associate image with tag
        let imgs: Array<[String: Any]> = httpResponse["images"] as! Array
        let img = imgs[0]["image"] as! [String: Any]
        let imgID = img["id"] as! String
        associateImageAndTag(imageID: imgID, tagID: tagID)
    }
    
    /// Associates an image with a tag.
    ///
    /// - Parameters:
    ///   - imageID: The image ID generated by Custom Vision.
    ///   - tagID: The tag ID generated by Custom Vision.
    static func associateImageAndTag(imageID: String, tagID: String) {
        let json: [String: Any] = [
            "tags": [
                [
                    "imageId": imageID,
                    "tagId": tagID
                ]
            ]
        ]
        requestWrapper(method: "POST", apiUrl: "images/tags", json: json)
    }
    
    /// Sends HTTP requests until they succeed.
    ///
    /// - Parameters:
    ///   - method: The HTTP method of the request.
    ///   - apiUrl: The end of the request URL.
    ///   - json: A dictionary for the request body; default empty.
    static func requestWrapper(method: String, apiUrl: String, json: [String: Any] = [:], predict: Bool = false) {
        httpResponse = [:]
        while httpResponse.count == 0 || httpResponse["error"] != nil {
            if httpResponse.count != 0 {
                sleep(1)
            }
            group.enter()
            sendRequest(method: method, apiUrl: apiUrl, json: json, predict: predict)
            group.wait()
        }
    }
    
    /// Sends an HTTP request.
    ///
    /// - Parameters:
    ///   - method: The HTTP method of the request.
    ///   - apiUrl: The end of the request URL.
    ///   - json: A dictionary for the request body.
    static func sendRequest(method: String, apiUrl: String, json: [String: Any], predict: Bool) {
        // create request
        let httpUrl = (predict ? predict_endpoint : train_endpoint) + apiUrl
        guard let url = URL(string: httpUrl) else {
            return
        }
        var request = URLRequest(url: url)
        request.httpMethod = method
        
        // set header values
        let headers = predict ? predict_headers : train_headers
        for (key, value) in headers {
            request.setValue(value, forHTTPHeaderField: key)
        }
        
        // set body values
        let jsonData = try? JSONSerialization.data(withJSONObject: json)
        request.httpBody = jsonData
        
        // make the request
        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
            guard let data = data, error == nil else {
                print(error?.localizedDescription ?? "No data")
                return
            }
            let responseJSON = try? JSONSerialization.jsonObject(with: data, options: [])
            if let responseJSON = responseJSON as? [String: Any] {
                httpResponse = responseJSON
                group.leave()
//                print(httpResponse)
            }
        }
        task.resume()
    }
}
